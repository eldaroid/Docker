Контейнер - несколько Линукс процессов, запущенных в изолированном окружении.

Образы:только чтение. Н/р: Apache Ubuntu App Образы используются для создания контейнера

Реестры: Докер реестр хранит образы. Это как авито для машин, оду купить машину и тд, ео только для образов, то где можно найти образы. Н/р: Docker Hub

Контейнеры: В контейнерах содержится все, что необходимо для работы приложения. Каждый контейнер создается из образа. Могут быть запущены, остановлены или удалены. Каждый контейнер изолирован и является безопасным для приложения.


Демон Docker (Docker Daemon) — это сервер Docker, который ожидает запросов к API Docker. Демон Docker управляет образами, контейнерами, сетями и томами.


Kubernetes — это технология, которая позволяет автоматизировать развёртывание и масштабирование контейнеризированных приложений, а также управление ими. Это — бесспорный лидер рынка средств для оркестрации контейнеров. Если вам нужен инструмент для работы с группами контейнеров, для масштабирования решений, основанных на них, используйте не Docker Swarm, а Kubernetes. Kubernetes не является частью Docker. Они с Docker, скорее, похожи на лучших друзей.

https://habr.com/ru/company/ruvds/blog/440660/

docker container run -h eldaroid -i -t -d -p 1000:8000 --rm my_image

create — создание контейнера из образа.
start — запуск существующего контейнера.
run — создание контейнера и его запуск.
ls — вывод списка работающих контейнеров.
inspect — вывод подробной информации о контейнере.
logs — вывод логов.
stop — остановка работающего контейнера с отправкой главному процессу контейнера сигнала SIGTERM, и, через некоторое время, SIGKILL.
kill — остановка работающего контейнера с отправкой главному процессу контейнера сигнала SIGKILL.
rm — удаление остановленного контейнера.

Флаг -i — это сокращение для --interactive. Благодаря этому флагу поток STDIN поддерживается в открытом состоянии даже если контейнер к STDIN не подключён.

Флаг -t =  еукьштфд— это сокращение для --tty. Благодаря этому флагу выделяется псевдотерминал, который соединяет используемый терминал с потоками STDIN и STDOUT контейнера.

Флаг -d — это сокращение для --detach. Эта команда запускает контейнер в фоновом режиме. Это позволяет использовать терминал, из которого запущен контейнер, для выполнения других команд во время работы контейнера.

Флаг -h - позволяет задать имя

docker container ls -a -s

Ключ -a этой команды — это сокращение для --all. Благодаря использованию этого ключа можно вывести сведения обо всех контейнерах, а не только о выполняющихся.

Ключ -s — это сокращение для --size. Он позволяет вывести размеры контейнеров.


Вот команда для создания контейнера из образа:
docker container create my_repo/my_image:my_tag

После того, как контейнер создан, его можно запустить следующей командой:
docker container start my_container

Теперь взглянем на команду, которая позволяет создать и запустить контейнер:
docker container run my_image


docker diff (Имя контейнера) - показывает изменения
Docker logs (Имя контейнера) - показывает все действия которые проводились на контейнере

Docker ps -aq -f status=exited - покзаывает id всех остановленных контейнеров
Docker rm -v $(docker ps -aq -f status=exited) - можно удалить их

Docker rmi (image id) - удаление имеджа докер




!!!
Для того, чтобы использовать файлы, которые используются на твоем маке необходимо их смонтировать при создании самого контейнера: 

Docker run -it —rm -v (целая директория откуда расположена на маке):(где будет расположена на контейнере) ubuntu:14.04

Docker run -it —rm -v $(pwd):/home ubuntu14.04
Ls /home - будет та директория, которая была на маке


!!!
Для того чтобы посмотреть и удалить список осиротевших томов, используйте команду
docker volume rm $(docker volume ls -qf dangling=true)



!!! Мессенджер на компе
Открываем два терминала и запускаем две команды docker run -it --rm --name (два разных имен) ubuntu:14.01
Смотрим env на одном из них и на нем же запускаем команду nc -l 1234
На другом открываем nc 127.17.0.4(ip адрес виртуозке предыдущей) 1234
И пишем текст, он сразу же появится на другом
